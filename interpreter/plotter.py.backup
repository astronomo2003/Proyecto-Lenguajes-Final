import math
import sys

class Plotter:
    """Plotting engine using pure Python (ASCII art plots)"""
    
    def __init__(self, width=80, height=25):  # ‚úÖ CORREGIDO: __init__ en lugar de _init
        self.width = width
        self.height = height
        self.symbols = {
            'point': '*',
            'line': '-',
            'vertical': '|',
            'cross': '+',
            'filled': '#',
            'empty': ' '
        }
    
    def plot(self, data, title="Plot", x_label="X", y_label="Y", symbol='*'):
        """
        Create a line plot from data
        data: list of y-values or list of (x, y) tuples
        """
        print(f"DEBUG: plot() recibi√≥ datos: {data}")
        print(f"DEBUG: tipo de datos: {type(data)}")
        
        # ‚úÖ CORRECCI√ìN: Manejar datos del DSL correctamente
        if not data:
            print("‚ùå No data to plot")
            return "No data to plot"
        
        # ‚úÖ CORRECCI√ìN: Si data es una matriz DSL [[1,2,3]], extraer la lista
        if isinstance(data, list) and len(data) > 0 and isinstance(data[0], list):
            # Es una matriz del DSL como [[1,4,2,8,5]]
            if len(data) == 1:
                # Una sola fila, usar como datos Y
                y_values = data[0]
                x_values = list(range(len(y_values)))
                print(f"‚úÖ DEBUG: Datos extra√≠dos de matriz: x={x_values}, y={y_values}")
            else:
                # M√∫ltiples filas, tratar como pares (x,y)
                x_values = [point[0] for point in data]
                y_values = [point[1] for point in data]
                print(f"‚úÖ DEBUG: Datos como pares (x,y): x={x_values}, y={y_values}")
        elif isinstance(data, list):
            # Es una lista simple [1,2,3]
            y_values = data
            x_values = list(range(len(y_values)))
            print(f"‚úÖ DEBUG: Lista simple: x={x_values}, y={y_values}")
        else:
            print(f"‚ùå Formato de datos no soportado: {type(data)}")
            return "Formato de datos no soportado"
        
        if not x_values or not y_values:
            print("‚ùå No valid data to plot")
            return "No valid data to plot"
        
        # Calculate ranges
        x_min, x_max = min(x_values), max(x_values)
        y_min, y_max = min(y_values), max(y_values)
        
        # Handle edge cases
        if x_min == x_max:
            x_min -= 1
            x_max += 1
        if y_min == y_max:
            y_min -= 1
            y_max += 1
        
        print(f"‚úÖ DEBUG: Rangos calculados - X: [{x_min}, {x_max}], Y: [{y_min}, {y_max}]")
        
        # Create plot area
        plot_area = [[' ' for _ in range(self.width)] for _ in range(self.height)]
        
        # Plot points
        points_plotted = 0
        for x, y in zip(x_values, y_values):
            # Convert to plot coordinates
            plot_x = int((x - x_min) / (x_max - x_min) * (self.width - 1))
            plot_y = self.height - 1 - int((y - y_min) / (y_max - y_min) * (self.height - 1))
            
            if 0 <= plot_x < self.width and 0 <= plot_y < self.height:
                plot_area[plot_y][plot_x] = symbol
                points_plotted += 1
        
        print(f"‚úÖ DEBUG: {points_plotted} puntos graficados")
        
        # Connect points with lines
        for i in range(len(x_values) - 1):
            x1, y1 = x_values[i], y_values[i]
            x2, y2 = x_values[i + 1], y_values[i + 1]
            
            plot_x1 = int((x1 - x_min) / (x_max - x_min) * (self.width - 1))
            plot_y1 = self.height - 1 - int((y1 - y_min) / (y_max - y_min) * (self.height - 1))
            plot_x2 = int((x2 - x_min) / (x_max - x_min) * (self.width - 1))
            plot_y2 = self.height - 1 - int((y2 - y_min) / (y_max - y_min) * (self.height - 1))
            
            # Draw line between points
            self._draw_line(plot_area, plot_x1, plot_y1, plot_x2, plot_y2, '-')
        
        # Create output
        print(f"\nüìä {title}")
        print("=" * len(title))
        
        # Y-axis labels
        for i in range(self.height):
            y_val = y_max - (y_max - y_min) * i / (self.height - 1)
            if i == 0 or i == self.height - 1 or i == self.height // 2:
                label = f"{y_val:8.2f}"
            else:
                label = " " * 8
            print(f"{label} |{''.join(plot_area[i])}|")
        
        # X-axis
        print(f"{' ' * 9}+{'-' * self.width}+")
        
        # X-axis labels
        x_labels = [
            f"{x_min:.2f}",
            f"{(x_min + x_max) / 2:.2f}",
            f"{x_max:.2f}"
        ]
        label_positions = [0, self.width // 2, self.width - 1]
        x_axis_line = [' '] * self.width
        
        for label, pos in zip(x_labels, label_positions):
            for i, char in enumerate(label):
                if pos + i < self.width:
                    x_axis_line[pos + i] = char
        
        print(f"{' ' * 10}{''.join(x_axis_line)}")
        print(f"{' ' * 10}{x_label}")
        print()
        
        return f"‚úÖ Plot generated successfully with {len(y_values)} points"  # ‚úÖ RETORNO CORREGIDO
    
    def scatter(self, x_data, y_data, title="Scatter Plot", x_label="X", y_label="Y", symbol='o'):
        """Create a scatter plot"""
        print(f"DEBUG: scatter() recibi√≥ x_data: {x_data}, y_data: {y_data}")
        
        # ‚úÖ CORRECCI√ìN: Manejar datos del DSL
        if isinstance(x_data, list) and len(x_data) > 0 and isinstance(x_data[0], list):
            x_data = x_data[0]  # Extraer de [[1,2,3]] a [1,2,3]
            print(f"‚úÖ DEBUG: X extra√≠do de matriz: {x_data}")
        if isinstance(y_data, list) and len(y_data) > 0 and isinstance(y_data[0], list):
            y_data = y_data[0]  # Extraer de [[4,5,6]] a [4,5,6]
            print(f"‚úÖ DEBUG: Y extra√≠do de matriz: {y_data}")
        
        if len(x_data) != len(y_data):
            error_msg = f"‚ùå X and Y data must have same length: {len(x_data)} vs {len(y_data)}"
            print(error_msg)
            return error_msg
        
        data_pairs = list(zip(x_data, y_data))
        print(f"‚úÖ DEBUG: Pares (x,y) creados: {data_pairs}")
        return self._create_scatter_plot(data_pairs, title, x_label, y_label, symbol)
    
    def _create_scatter_plot(self, data, title, x_label, y_label, symbol):
        """Create scatter plot from (x, y) pairs"""
        if not data:
            print("‚ùå No data to plot")
            return "No data to plot"
        
        x_values = [point[0] for point in data]
        y_values = [point[1] for point in data]
        
        # Calculate ranges
        x_min, x_max = min(x_values), max(x_values)
        y_min, y_max = min(y_values), max(y_values)
        
        # Handle edge cases
        if x_min == x_max:
            x_min -= 1
            x_max += 1
        if y_min == y_max:
            y_min -= 1
            y_max += 1
        
        # Create plot area
        plot_area = [[' ' for _ in range(self.width)] for _ in range(self.height)]
        
        # Plot points
        points_plotted = 0
        for x, y in data:
            plot_x = int((x - x_min) / (x_max - x_min) * (self.width - 1))
            plot_y = self.height - 1 - int((y - y_min) / (y_max - y_min) * (self.height - 1))
            
            if 0 <= plot_x < self.width and 0 <= plot_y < self.height:
                plot_area[plot_y][plot_x] = symbol
                points_plotted += 1
        
        print(f"‚úÖ DEBUG: {points_plotted} puntos graficados en scatter")
        
        # Print plot
        print(f"\nüìä {title}")
        print("=" * len(title))
        
        # Y-axis labels
        for i in range(self.height):
            y_val = y_max - (y_max - y_min) * i / (self.height - 1)
            if i == 0 or i == self.height - 1 or i == self.height // 2:
                label = f"{y_val:8.2f}"
            else:
                label = " " * 8
            print(f"{label} |{''.join(plot_area[i])}|")
        
        # X-axis
        print(f"{' ' * 9}+{'-' * self.width}+")
        
        # X-axis labels
        x_labels = [
            f"{x_min:.2f}",
            f"{(x_min + x_max) / 2:.2f}",
            f"{x_max:.2f}"
        ]
        label_positions = [0, self.width // 2, self.width - 1]
        x_axis_line = [' '] * self.width
        
        for label, pos in zip(x_labels, label_positions):
            for i, char in enumerate(label):
                if pos + i < self.width:
                    x_axis_line[pos + i] = char
        
        print(f"{' ' * 10}{''.join(x_axis_line)}")
        print(f"{' ' * 10}{x_label}")
        print()
        
        return f"‚úÖ Scatter plot generated with {len(data)} points"  # ‚úÖ RETORNO CORREGIDO
    
    def histogram(self, data, bins=10, title="Histogram", x_label="Value", y_label="Frequency"):
        """Create a histogram"""
        print(f"DEBUG: histogram() recibi√≥ datos: {data}")
        
        # ‚úÖ CORRECCI√ìN: Manejar datos del DSL
        if isinstance(data, list) and len(data) > 0 and isinstance(data[0], list):
            data = data[0]  # Extraer de [[1,2,3]] a [1,2,3]
            print(f"‚úÖ DEBUG: Datos extra√≠dos de matriz: {data}")
        
        if not data:
            print("‚ùå No data to plot")
            return "No data to plot"
        
        # Calculate histogram
        data_min, data_max = min(data), max(data)
        
        if data_min == data_max:
            print("‚ö†  All values are the same")
            return "All values are the same"
        
        bin_width = (data_max - data_min) / bins
        bin_edges = [data_min + i * bin_width for i in range(bins + 1)]
        bin_counts = [0] * bins
        
        # Count values in each bin
        for value in data:
            bin_index = min(int((value - data_min) / bin_width), bins - 1)
            bin_counts[bin_index] += 1
        
        print(f"‚úÖ DEBUG: Bins calculados: {bin_counts}")
        
        # Create histogram plot
        max_count = max(bin_counts) if bin_counts else 1
        
        print(f"\nüìä {title}")
        print("=" * len(title))
        
        # Plot bars
        for i in range(self.height):
            y_val = max_count - (max_count * i / (self.height - 1))
            if i == 0 or i == self.height - 1 or i == self.height // 2:
                label = f"{y_val:8.1f}"
            else:
                label = " " * 8
            
            line = []
            for count in bin_counts:
                bar_height = int((count / max_count) * (self.height - 1))
                if self.height - 1 - i <= bar_height:
                    line.append('#')
                else:
                    line.append(' ')
            
            print(f"{label} |{''.join(line)}|")
        
        # X-axis
        print(f"{' ' * 9}+{'-' * bins}+")
        
        # X-axis labels
        step = max(1, bins // 5)
        x_axis_line = [' '] * bins
        for i in range(0, bins, step):
            label = f"{bin_edges[i]:.1f}"
            for j, char in enumerate(label):
                if i + j < bins:
                    x_axis_line[i + j] = char
        
        print(f"{' ' * 10}{''.join(x_axis_line)}")
        print(f"{' ' * 10}{x_label}")
        print(f"üìà Total samples: {len(data)}")
        print()
        
        return f"‚úÖ Histogram generated with {len(data)} samples"  # ‚úÖ RETORNO CORREGIDO
    
    def _draw_line(self, plot_area, x1, y1, x2, y2, symbol):
        """Draw a line between two points using Bresenham's algorithm"""
        dx = abs(x2 - x1)
        dy = abs(y2 - y1)
        
        x_step = 1 if x1 < x2 else -1
        y_step = 1 if y1 < y2 else -1
        
        error = dx - dy
        
        x, y = x1, y1
        
        while True:
            if 0 <= x < self.width and 0 <= y < self.height:
                if plot_area[y][x] == ' ':
                    plot_area[y][x] = symbol
            
            if x == x2 and y == y2:
                break
            
            error2 = 2 * error
            
            if error2 > -dy:
                error -= dy
                x += x_step
            
            if error2 < dx:
                error += dx
                y += y_step
    
    def set_dimensions(self, width, height):
        """Set plot dimensions"""
        self.width = max(20, width)
        self.height = max(10, height)
        print(f"‚úÖ Plot dimensions set to {self.width}x{self.height}")
    
    def get_dimensions(self):
        """Get current plot dimensions"""
        return self.width, self.height
